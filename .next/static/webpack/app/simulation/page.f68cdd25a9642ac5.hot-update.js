"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/simulation/page",{

/***/ "(app-pages-browser)/./src/app/simulation/page.tsx":
/*!*************************************!*\
  !*** ./src/app/simulation/page.tsx ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Simulation; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.13_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/navigation */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.13_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.13_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _components_SimulationControls__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/SimulationControls */ \"(app-pages-browser)/./src/app/simulation/components/SimulationControls.tsx\");\n/* harmony import */ var _components_PopulationCanvas__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/PopulationCanvas */ \"(app-pages-browser)/./src/app/simulation/components/PopulationCanvas.tsx\");\n/* harmony import */ var _components_StatusChart__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/StatusChart */ \"(app-pages-browser)/./src/app/simulation/components/StatusChart.tsx\");\n/* harmony import */ var _components_SimulationControlsPopover__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/SimulationControlsPopover */ \"(app-pages-browser)/./src/app/simulation/components/SimulationControlsPopover.tsx\");\n/* harmony import */ var _components_Person__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/Person */ \"(app-pages-browser)/./src/app/simulation/components/Person.ts\");\n// \"use client\";\n// import { useSearchParams } from \"next/navigation\";\n// import dynamic from \"next/dynamic\";\n// import { useEffect, useRef, useState } from \"react\";\n// import { Line } from \"react-chartjs-2\";\n// import {\n//   Chart as ChartJS,\n//   LineElement,\n//   CategoryScale,\n//   LinearScale,\n//   PointElement,\n// } from \"chart.js\";\n// // Dynamically load react-p5 since p5.js relies on browser-specific features\n// const Sketch = dynamic(() => import(\"react-p5\").then((mod) => mod.default), {\n//   ssr: false,\n// });\n// // Register Chart.js components\n// ChartJS.register(LineElement, CategoryScale, LinearScale, PointElement);\n// // Define chart data type\n// type ChartData = {\n//   labels: number[];\n//   datasets: {\n//     label: string;\n//     data: number[];\n//     borderColor: string;\n//     fill: boolean;\n//   }[];\n// };\n// export default function Simulation() {\n//   const searchParams = useSearchParams();\n//   const vaccineEfficacy = parseFloat(\n//     searchParams.get(\"vaccineEfficacy\") || \"0.8\"\n//   );\n//   const populationVaccinated = parseFloat(\n//     searchParams.get(\"populationVaccinated\") || \"0.7\"\n//   );\n//   const infectionProbability = parseFloat(\n//     searchParams.get(\"infectionProbability\") || \"0.5\"\n//   );\n//   const vaccinatedRecoveryRate = parseFloat(\n//     searchParams.get(\"vaccinatedRecoveryRate\") || \"0.5\"\n//   );\n//   const unvaccinatedRecoveryRate = parseFloat(\n//     searchParams.get(\"unvaccinatedRecoveryRate\") || \"0.1\"\n//   );\n//   const peakInfectionDay = parseInt(\n//     searchParams.get(\"peakInfectionDay\") || \"5\"\n//   );\n//   const totalDays = parseInt(searchParams.get(\"totalDays\") || \"30\");\n//   const populationSize = parseInt(searchParams.get(\"populationSize\") || \"250\");\n//   // Population array managed outside of React state for performance\n//   const [people, setPeople] = useState<Person[]>([]);\n//   //const populationSize = 100;\n//   const p5Instance = useRef<any>(null); // Reference to p5.js instance\n//   // Simulation speed control\n//   const [speed, setSpeed] = useState(1); // 1x speed by default\n//   // Chart data\n//   const [chartData, setChartData] = useState<ChartData>({\n//     labels: [], // Frame count (or time steps)\n//     datasets: [\n//       {\n//         label: \"Healthy\",\n//         data: [],\n//         borderColor: \"blue\",\n//         fill: false,\n//       },\n//       {\n//         label: \"Infected\",\n//         data: [],\n//         borderColor: \"red\",\n//         fill: false,\n//       },\n//       {\n//         label: \"Recovered\",\n//         data: [],\n//         borderColor: \"green\",\n//         fill: false,\n//       },\n//     ],\n//   });\n//   const frameCount = useRef(0); // Keep track of the simulation frames\n//   // Person object representing each individual in the population\n//   class Person {\n//     x: number;\n//     y: number;\n//     status: string; // 'healthy', 'infected', 'recovered'\n//     vaccinated: boolean;\n//     constructor(x: number, y: number, vaccinated: boolean, status = \"healthy\") {\n//       this.x = x;\n//       this.y = y;\n//       this.vaccinated = vaccinated;\n//       this.status = status;\n//     }\n//     // Determine if a person can get infected\n//     tryToInfect(p5: any, infectionRadius: number) {\n//       if (this.status === \"healthy\") {\n//         for (let other of people) {\n//           if (other.status === \"infected\") {\n//             // Check if this person is within infection radius\n//             let d = p5.dist(this.x, this.y, other.x, other.y);\n//             if (d < infectionRadius) {\n//               // Check vaccination status and infection probability\n//               if (!this.vaccinated || Math.random() > vaccineEfficacy) {\n//                 // Random chance of infection\n//                 if (Math.random() < infectionProbability) {\n//                   this.status = \"infected\"; // This person gets infected\n//                 }\n//               }\n//             }\n//           }\n//         }\n//       }\n//     }\n//     move(p5: any) {\n//       this.x += p5.random(-5, 5); // Increased movement\n//       this.y += p5.random(-5, 5);\n//       this.x = p5.constrain(this.x, 0, p5.width);\n//       this.y = p5.constrain(this.y, 0, p5.height);\n//     }\n//     show(p5: any) {\n//       if (this.status === \"healthy\") {\n//         p5.fill(100, 200, 255); // blue for healthy\n//       } else if (this.status === \"infected\") {\n//         p5.fill(255, 100, 100); // red for infected\n//       } else if (this.status === \"recovered\") {\n//         p5.fill(0, 255, 0); // green for recovered\n//       }\n//       p5.ellipse(this.x, this.y, 20, 20);\n//     }\n//     // recover() {\n//     //   if (this.status === \"infected\" && Math.random() < 0.01) {\n//     //     this.status = \"recovered\";\n//     //   }\n//     // }\n//     // new recover function needed\n//     recover() {\n//       if (this.status === \"infected\") {\n//         const recoveryChance = this.vaccinated\n//           ? vaccinatedRecoveryRate\n//           : unvaccinatedRecoveryRate;\n//         if (Math.random() < recoveryChance) {\n//           this.status = \"recovered\";\n//         }\n//       }\n//     }\n//   }\n//   // Initialize population once in useEffect\n//   useEffect(() => {\n//     if (people.length === 0) {\n//       const newPeople: Person[] = [];\n//       for (let i = 0; i < populationSize; i++) {\n//         let x = Math.random() * 800;\n//         let y = Math.random() * 600;\n//         let vaccinated = Math.random() < populationVaccinated;\n//         newPeople.push(new Person(x, y, vaccinated));\n//       }\n//       for (let i = 0; i < 50; i++) {\n//         newPeople[i].status = \"infected\"; // setting to infected from start\n//       }\n//       setPeople(newPeople);\n//     }\n//   }, []); // Empty dependency array ensures people are initialized only once\n//   // Function to update chart data\n//   const updateChartData = (\n//     healthy: number,\n//     infected: number,\n//     recovered: number,\n//     frame: number\n//   ) => {\n//     setChartData((prevData) => ({\n//       labels: [...prevData.labels, frame], // Append the new frame count\n//       datasets: [\n//         {\n//           ...prevData.datasets[0],\n//           data: [...prevData.datasets[0].data, healthy], // Append the new healthy count\n//         },\n//         {\n//           ...prevData.datasets[1],\n//           data: [...prevData.datasets[1].data, infected], // Append the new infected count\n//         },\n//         {\n//           ...prevData.datasets[2],\n//           data: [...prevData.datasets[2].data, recovered], // Append the new recovered count\n//         },\n//       ],\n//     }));\n//   };\n//   // p5.js setup and draw functions\n//   const setup = (p5: any, canvasParentRef: Element) => {\n//     p5.createCanvas(800, 600).parent(canvasParentRef);\n//     p5Instance.current = p5; // Save p5.js instance for future reference\n//     p5.frameRate(30); // Set default frame rate\n//   };\n//   const draw = (p5: any) => {\n//     p5.background(255);\n//     let healthyCount = 0;\n//     let infectedCount = 0;\n//     let recoveredCount = 0;\n//     // Render and update each person\n//     people.forEach((person) => {\n//       person.move(p5);\n//       person.show(p5);\n//       person.tryToInfect(p5, 50); // Infection radius is 50 pixels\n//       person.recover();\n//       // Count people by their status\n//       if (person.status === \"healthy\") healthyCount++;\n//       if (person.status === \"infected\") infectedCount++;\n//       if (person.status === \"recovered\") recoveredCount++;\n//     });\n//     if (frameCount.current > totalDays * 30) {\n//       p5.noLoop();\n//     }\n//     // Update the chart every frame\n//     frameCount.current++;\n//     updateChartData(\n//       healthyCount,\n//       infectedCount,\n//       recoveredCount,\n//       frameCount.current\n//     );\n//   };\n//   // Handle speed changes using p5's frameRate()\n//   const handleSpeedChange = () => {\n//     if (speed === 1) {\n//       setSpeed(2); // Speed up to 2x\n//       p5Instance.current.frameRate(60); // Double the frame rate for 2x speed\n//     } else if (speed === 2) {\n//       setSpeed(4); // Speed up to 4x\n//       p5Instance.current.frameRate(120); // Quadruple the frame rate for 4x speed\n//     } else {\n//       setSpeed(1); // Reset to 1x speed\n//       p5Instance.current.frameRate(30); // Default frame rate\n//     }\n//   };\n//   return (\n//     <div style={{ display: \"flex\", gap: \"20px\" }}>\n//       {/* Left: Simulation */}\n//       <div>\n//         <h2>Flu Simulation</h2>\n//         <p>Vaccine Efficacy: {Math.round(vaccineEfficacy * 100)}%</p>\n//         <p>Population Vaccinated: {Math.round(populationVaccinated * 100)}%</p>\n//         <p>Infection Probability: {Math.round(infectionProbability * 100)}%</p>\n//         <p>\n//           {\" \"}\n//           Vaccinated Recovery Rate: {Math.round(vaccinatedRecoveryRate * 100)}%\n//         </p>\n//         <p>\n//           Unvaccinated Recovery Rate:{\" \"}\n//           {Math.round(unvaccinatedRecoveryRate * 100)}%\n//         </p>\n//         <p>Peak Infection Day: {peakInfectionDay}</p>\n//         <p>Total Days: {totalDays}</p>\n//         <p>Population Size: {populationSize}</p>\n//         <button onClick={handleSpeedChange}>\n//           {speed === 1\n//             ? \"Speed Up (2x)\"\n//             : speed === 2\n//             ? \"Speed Up (4x)\"\n//             : \"Reset Speed (1x)\"}\n//         </button>\n//         <Sketch setup={setup} draw={draw} />\n//       </div>\n//       {/* Right: Line Graph */}\n//       <div style={{ width: \"400px\" }}>\n//         <h3>Status Over Time</h3>\n//         <Line data={chartData} />\n//       </div>\n//     </div>\n//   );\n// }\n//---------------------------------------------------------------------------------------\n//---------------------------------------------------------------------------------------\n//---------------------------------------------------------------------------------------\n//---------------------------------------------------------------------------------------\n// \"use client\";\n// import { useSearchParams } from \"next/navigation\";\n// import dynamic from \"next/dynamic\";\n// import { useEffect, useRef, useState } from \"react\";\n// import { Line } from \"react-chartjs-2\";\n// import {\n//   Chart as ChartJS,\n//   LineElement,\n//   CategoryScale,\n//   LinearScale,\n//   PointElement,\n// } from \"chart.js\";\n// import Modal from 'react-modal';\n// // Dynamically load react-p5 since p5.js relies on browser-specific features\n// const Sketch = dynamic(() => import(\"react-p5\").then((mod) => mod.default), {\n//   ssr: false,\n// });\n// // Register Chart.js components\n// ChartJS.register(LineElement, CategoryScale, LinearScale, PointElement);\n// // Define chart data type\n// type ChartData = {\n//   labels: number[];\n//   datasets: {\n//     label: string;\n//     data: number[];\n//     borderColor: string;\n//     fill: boolean;\n//     borderDash?: number[];\n//   }[];\n// };\n// export default function Simulation() {\n//   const [showModal, setShowModal] = useState(false);\n//   const [graphs, setGraphs] = useState([]);\n//   const searchParams = useSearchParams();\n//   const addNewGraph = (newParams)=> {\n//     const newGraphData = runSimulation(newParams);\n//     setGraphs([...graphs, newGraphData]);\n//     setShowModal(false);\n//   }\n//   // Extract parameters from URL\n//   const vaccineEfficacy = parseFloat(\n//     searchParams.get(\"vaccineEfficacy\") || \"0.8\"\n//   );\n//   const populationVaccinated = parseFloat(\n//     searchParams.get(\"populationVaccinated\") || \"0.7\"\n//   );\n//   const infectionProbability = parseFloat(\n//     searchParams.get(\"infectionProbability\") || \"0.5\"\n//   );\n//   const vaccinatedRecoveryRate = parseFloat(\n//     searchParams.get(\"vaccinatedRecoveryRate\") || \"0.5\"\n//   );\n//   const unvaccinatedRecoveryRate = parseFloat(\n//     searchParams.get(\"unvaccinatedRecoveryRate\") || \"0.1\"\n//   );\n//   const peakInfectionDay = parseInt(\n//     searchParams.get(\"peakInfectionDay\") || \"5\"\n//   );\n//   const totalDays = parseInt(searchParams.get(\"totalDays\") || \"30\");\n//   const populationSize = parseInt(searchParams.get(\"populationSize\") || \"100\");\n//   // State for simulation data\n//   const [days, setDays] = useState<number[]>([]);\n//   const [susceptiblePopulation, setSusceptiblePopulation] = useState<number[]>(\n//     []\n//   );\n//   const [infectedPopulation, setInfectedPopulation] = useState<number[]>([]);\n//   const [recoveredVaccinated, setRecoveredVaccinated] = useState<number[]>([]);\n//   const [recoveredUnvaccinated, setRecoveredUnvaccinated] = useState<number[]>(\n//     []\n//   );\n//   const [totalRecoveredPopulation, setTotalRecoveredPopulation] = useState<\n//     number[]\n//   >([]);\n//   const [speed, setSpeed] = useState(1); // 1x speed by default\n//   const p5Instance = useRef<any>(null); // Reference to p5.js instance\n//   // Chart data\n//   const [chartData, setChartData] = useState<ChartData>({\n//     labels: [], // Frame count (or time steps)\n//     datasets: [\n//       {\n//         label: \"Susceptible\",\n//         data: [],\n//         borderColor: \"orange\",\n//         fill: false,\n//       },\n//       {\n//         label: \"Infected\",\n//         data: [],\n//         borderColor: \"red\",\n//         fill: false,\n//       },\n//       {\n//         label: \"Total Recovered\",\n//         data: [],\n//         borderColor: \"green\",\n//         fill: false,\n//       },\n//       {\n//         label: \"Recovered Vaccinated\",\n//         data: [],\n//         borderColor: \"blue\",\n//         borderDash: [5, 5],\n//         fill: false,\n//       },\n//       {\n//         label: \"Recovered Unvaccinated\",\n//         data: [],\n//         borderColor: \"purple\",\n//         borderDash: [5, 5],\n//         fill: false,\n//       },\n//     ],\n//   });\n//   // Initialize and calculate flu model data\n//   useEffect(() => {\n//     const daysArray = Array.from(\n//       { length: 100 },\n//       (_, i) => (i / 100) * totalDays\n//     );\n//     setDays(daysArray);\n//     const vaccinatedPopulation = populationSize * populationVaccinated;\n//     const unvaccinatedPopulation = populationSize * (1 - populationVaccinated);\n//     // Calculate recovered population\n//     const recoveredVaccinatedArray = daysArray.map(\n//       (day) =>\n//         (1 / (1 + Math.exp(-vaccinatedRecoveryRate * (day - totalDays / 2)))) *\n//         vaccinatedPopulation\n//     );\n//     const recoveredUnvaccinatedArray = daysArray.map(\n//       (day) =>\n//         (1 /\n//           (1 + Math.exp(-unvaccinatedRecoveryRate * (day - totalDays / 2)))) *\n//         unvaccinatedPopulation\n//     );\n//     const infectedArray = daysArray.map(\n//       (day) =>\n//         Math.exp(-infectionProbability * (day - peakInfectionDay) ** 2) *\n//         populationSize\n//     );\n//     const recoveredArray = recoveredVaccinatedArray.map(\n//       (rv, i) => rv + recoveredUnvaccinatedArray[i]\n//     );\n//     const susceptibleArray = daysArray.map((_, i) => {\n//       const susceptibleValue =\n//         populationSize - (infectedArray[i] + recoveredArray[i]);\n//       return Math.max(susceptibleValue, 0); // Ensure no negative values\n//     });\n//     // Set calculated state variables\n//     setSusceptiblePopulation(susceptibleArray);\n//     setInfectedPopulation(infectedArray);\n//     setRecoveredVaccinated(recoveredVaccinatedArray);\n//     setRecoveredUnvaccinated(recoveredUnvaccinatedArray);\n//     setTotalRecoveredPopulation(recoveredArray);\n//   }, [\n//     infectionProbability,\n//     vaccinatedRecoveryRate,\n//     unvaccinatedRecoveryRate,\n//     populationVaccinated,\n//     peakInfectionDay,\n//     totalDays,\n//     populationSize,\n//   ]);\n//   // Update chart data when state changes\n//   useEffect(() => {\n//     setChartData({\n//       labels: days,\n//       datasets: [\n//         {\n//           label: \"Susceptible\",\n//           data: susceptiblePopulation,\n//           borderColor: \"orange\",\n//           fill: false,\n//         },\n//         {\n//           label: \"Infected\",\n//           data: infectedPopulation,\n//           borderColor: \"red\",\n//           fill: false,\n//         },\n//         {\n//           label: \"Total Recovered\",\n//           data: totalRecoveredPopulation,\n//           borderColor: \"green\",\n//           fill: false,\n//         },\n//         {\n//           label: \"Recovered Vaccinated\",\n//           data: recoveredVaccinated,\n//           borderColor: \"blue\",\n//           borderDash: [5, 5],\n//           fill: false,\n//         },\n//         {\n//           label: \"Recovered Unvaccinated\",\n//           data: recoveredUnvaccinated,\n//           borderColor: \"purple\",\n//           borderDash: [5, 5],\n//           fill: false,\n//         },\n//       ],\n//     });\n//   }, [\n//     days,\n//     susceptiblePopulation,\n//     infectedPopulation,\n//     totalRecoveredPopulation,\n//     recoveredVaccinated,\n//     recoveredUnvaccinated,\n//   ]);\n//   // p5.js setup and draw functions\n//   const setup = (p5: any, canvasParentRef: Element) => {\n//     p5.createCanvas(800, 600).parent(canvasParentRef);\n//     p5Instance.current = p5;\n//     p5.frameRate(30);\n//   };\n//   const draw = (p5: any) => {\n//     p5.background(255);\n//   };\n//   // Handle speed changes using p5's frameRate()\n//   const handleSpeedChange = () => {\n//     if (speed === 1) {\n//       setSpeed(2);\n//       p5Instance.current.frameRate(60);\n//     } else if (speed === 2) {\n//       setSpeed(4);\n//       p5Instance.current.frameRate(120);\n//     } else {\n//       setSpeed(1);\n//       p5Instance.current.frameRate(30);\n//     }\n//   };\n//   return (\n//     <div style={{ display: \"flex\", gap: \"20px\" }}>\n//       {/* Left: Simulation */}\n//       <div>\n//         <h2>Flu Simulation</h2>\n//         <p>Vaccine Efficacy: {Math.round(vaccineEfficacy * 100)}%</p>\n//         <p>Population Vaccinated: {Math.round(populationVaccinated * 100)}%</p>\n//         <p>Infection Probability: {Math.round(infectionProbability * 100)}%</p>\n//         <p>\n//           Vaccinated Recovery Rate: {Math.round(vaccinatedRecoveryRate * 100)}%\n//         </p>\n//         <p>\n//           Unvaccinated Recovery Rate:{\" \"}\n//           {Math.round(unvaccinatedRecoveryRate * 100)}%\n//         </p>\n//         <p>Peak Infection Day: {peakInfectionDay}</p>\n//         <p>Total Days: {totalDays}</p>\n//         <p>Population Size: {populationSize}</p>\n//         <button onClick={handleSpeedChange}>\n//           {speed === 1\n//             ? \"Speed Up (2x)\"\n//             : speed === 2\n//             ? \"Speed Up (4x)\"\n//             : \"Reset Speed (1x)\"}\n//         </button>\n//         <Sketch setup={setup} draw={draw} />\n//       </div>\n//       {/* Right: Line Graph */}\n//       <div style={{ width: \"400px\" }}>\n//         <h3>Status Over Time</h3>\n//         <Line data={chartData} />\n//       </div>\n//   <button onClick={() => setShowModal(true)}>Add New</button>\n//       {/* Modal for adding new graph */}\n//       <Modal isOpen={showModal} onRequestClose={() => setShowModal(false)}>\n//         <h2>Enter New Parameters</h2>\n//         <ParameterForm onSubmit={addNewGraph} closeModal={() => setShowModal(false)} />\n//       </Modal>\n//       {/* Display all graphs */}\n//       {graphs.map((graph, index) => (\n//         <div key={index}>\n//           <h3>Graph {index + 1}</h3>\n//           <Line data={graph} />\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n//------------------------------------------------\n//------------------------------------------------\n// \"use client\";\n// import { useSearchParams } from \"next/navigation\";\n// import { useEffect, useState, useRef } from \"react\";\n// import SimulationControls from \"./components/SimulationControls\";\n// import PopulationCanvas from \"./components/PopulationCanvas\";\n// import StatusChart from \"./components/StatusChart\";\n// import Person from \"./components/Person\";\n// type ChartData = {\n//   labels: number[];\n//   datasets: {\n//     label: string;\n//     data: number[];\n//     borderColor: string;\n//     fill: boolean;\n//   }[];\n// };\n// export default function Simulation() {\n//   const searchParams = useSearchParams();\n//   const vaccineEfficacy = parseFloat(\n//     searchParams.get(\"vaccineEfficacy\") || \"0.8\"\n//   );\n//   const populationVaccinated = parseFloat(\n//     searchParams.get(\"populationVaccinated\") || \"0.7\"\n//   );\n//   const infectionProbability = parseFloat(\n//     searchParams.get(\"infectionProbability\") || \"0.5\"\n//   );\n//   const vaccinatedRecoveryRate = parseFloat(\n//     searchParams.get(\"vaccinatedRecoveryRate\") || \"0.5\"\n//   );\n//   const unvaccinatedRecoveryRate = parseFloat(\n//     searchParams.get(\"unvaccinatedRecoveryRate\") || \"0.1\"\n//   );\n//   const peakInfectionDay = parseInt(\n//     searchParams.get(\"peakInfectionDay\") || \"5\"\n//   );\n//   const totalDays = parseInt(searchParams.get(\"totalDays\") || \"30\");\n//   const populationSize = parseInt(searchParams.get(\"populationSize\") || \"250\");\n//   const [people, setPeople] = useState<Person[]>([]);\n//   const [speed, setSpeed] = useState(1);\n//   const [chartData, setChartData] = useState<ChartData>({\n//     labels: [],\n//     datasets: [\n//       { label: \"Healthy\", data: [], borderColor: \"blue\", fill: false },\n//       { label: \"Infected\", data: [], borderColor: \"red\", fill: false },\n//       { label: \"Recovered\", data: [], borderColor: \"green\", fill: false },\n//     ],\n//   });\n//   const updateChartData = (\n//     healthy: number,\n//     infected: number,\n//     recovered: number,\n//     frame: number\n//   ) => {\n//     setChartData((prevData) => ({\n//       labels: [...prevData.labels, frame],\n//       datasets: [\n//         {\n//           ...prevData.datasets[0],\n//           data: [...prevData.datasets[0].data, healthy],\n//         },\n//         {\n//           ...prevData.datasets[1],\n//           data: [...prevData.datasets[1].data, infected],\n//         },\n//         {\n//           ...prevData.datasets[2],\n//           data: [...prevData.datasets[2].data, recovered],\n//         },\n//       ],\n//     }));\n//   };\n//   const handleSpeedChange = () =>\n//     setSpeed((prev) => (prev === 1 ? 2 : prev === 2 ? 4 : 1));\n//   useEffect(() => {\n//     const newPeople: Person[] = [];\n//     for (let i = 0; i < populationSize; i++) {\n//       const x = Math.random() * 800;\n//       const y = Math.random() * 600;\n//       const vaccinated = Math.random() < populationVaccinated;\n//       newPeople.push(new Person(x, y, vaccinated));\n//     }\n//     setPeople(newPeople);\n//   }, [populationSize, populationVaccinated]);\n//   return (\n//     <div style={{ display: \"flex\", gap: \"20px\" }}>\n//       <SimulationControls\n//         vaccineEfficacy={vaccineEfficacy}\n//         populationVaccinated={populationVaccinated}\n//         infectionProbability={infectionProbability}\n//         vaccinatedRecoveryRate={vaccinatedRecoveryRate}\n//         unvaccinatedRecoveryRate={unvaccinatedRecoveryRate}\n//         peakInfectionDay={peakInfectionDay}\n//         totalDays={totalDays}\n//         populationSize={populationSize}\n//         speed={speed}\n//         handleSpeedChange={handleSpeedChange}\n//       />\n//       <PopulationCanvas\n//         people={people}\n//         vaccineEfficacy={vaccineEfficacy}\n//         infectionProbability={infectionProbability}\n//         vaccinatedRecoveryRate={vaccinatedRecoveryRate}\n//         unvaccinatedRecoveryRate={unvaccinatedRecoveryRate}\n//         totalDays={totalDays}\n//         updateChartData={updateChartData}\n//       />\n//       <StatusChart chartData={chartData} />\n//     </div>\n//   );\n// }\n//---------\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\nfunction Simulation() {\n    _s();\n    const searchParams = (0,next_navigation__WEBPACK_IMPORTED_MODULE_1__.useSearchParams)();\n    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_1__.useRouter)();\n    // State to manage list of simulations\n    const [simulations, setSimulations] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)([]);\n    // Parameter retrieval function\n    const getSimulationParams = ()=>{\n        return {\n            vaccineEfficacy: parseFloat(searchParams.get(\"vaccineEfficacy\") || \"0.8\"),\n            populationVaccinated: parseFloat(searchParams.get(\"populationVaccinated\") || \"0.7\"),\n            infectionProbability: parseFloat(searchParams.get(\"infectionProbability\") || \"0.5\"),\n            vaccinatedRecoveryRate: parseFloat(searchParams.get(\"vaccinatedRecoveryRate\") || \"0.5\"),\n            unvaccinatedRecoveryRate: parseFloat(searchParams.get(\"unvaccinatedRecoveryRate\") || \"0.1\"),\n            peakInfectionDay: parseInt(searchParams.get(\"peakInfectionDay\") || \"5\"),\n            totalDays: parseInt(searchParams.get(\"totalDays\") || \"30\"),\n            populationSize: parseInt(searchParams.get(\"populationSize\") || \"250\")\n        };\n    };\n    // Function to add a new simulation\n    const addSimulation = ()=>{\n        const params = getSimulationParams();\n        const newPeople = [];\n        for(let i = 0; i < params.populationSize; i++){\n            const x = Math.random() * 800;\n            const y = Math.random() * 600;\n            const vaccinated = Math.random() < params.populationVaccinated;\n            newPeople.push(new _components_Person__WEBPACK_IMPORTED_MODULE_7__[\"default\"](x, y, vaccinated));\n        }\n        // Chart Data Initial State\n        const initialChartData = {\n            labels: [],\n            datasets: [\n                {\n                    label: \"Healthy\",\n                    data: [],\n                    borderColor: \"blue\",\n                    fill: false\n                },\n                {\n                    label: \"Infected\",\n                    data: [],\n                    borderColor: \"red\",\n                    fill: false\n                },\n                {\n                    label: \"Recovered\",\n                    data: [],\n                    borderColor: \"green\",\n                    fill: false\n                }\n            ]\n        };\n        setSimulations((prevSimulations)=>[\n                ...prevSimulations,\n                {\n                    params,\n                    people: newPeople,\n                    chartData: initialChartData,\n                    currentDay: 0\n                }\n            ]);\n    };\n    // Function to update chart data\n    const updateChartData = (simulationIndex, healthy, infected, recovered, frame)=>{\n        setSimulations((prevSimulations)=>{\n            const updatedSimulations = [\n                ...prevSimulations\n            ];\n            updatedSimulations[simulationIndex].chartData.labels.push(frame);\n            updatedSimulations[simulationIndex].chartData.datasets[0].data.push(healthy);\n            updatedSimulations[simulationIndex].chartData.datasets[1].data.push(infected);\n            updatedSimulations[simulationIndex].chartData.datasets[2].data.push(recovered);\n            return updatedSimulations;\n        });\n    };\n    // Effect to initialize the simulation and update it over time\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        // Create an interval to simulate the spread and update the charts\n        const interval = setInterval(()=>{\n            setSimulations((prevSimulations)=>prevSimulations.map((simulation, index)=>{\n                    const { currentDay, params, people } = simulation;\n                    // Stop updating if the simulation has reached its total days\n                    if (currentDay >= params.totalDays) {\n                        return simulation;\n                    }\n                    // Simulate the disease spread and recovery\n                    let healthy = 0, infected = 0, recovered = 0;\n                    // Update people status\n                    people.forEach((person)=>{\n                        person.updateStatus(params.infectionProbability, params.vaccineEfficacy, params.vaccinatedRecoveryRate, params.unvaccinatedRecoveryRate);\n                        if (person.isHealthy()) healthy++;\n                        else if (person.isInfected()) infected++;\n                        else if (person.isRecovered()) recovered++;\n                    });\n                    // Update chart data\n                    updateChartData(index, healthy, infected, recovered, currentDay);\n                    // Increment current day\n                    return {\n                        ...simulation,\n                        currentDay: currentDay + 1,\n                        people\n                    };\n                }));\n        }, 1000); // Run every second for the sake of simulation\n        return ()=>clearInterval(interval);\n    }, [\n        simulations\n    ]);\n    // Function to handle updating URL parameters\n    const updateUrlParams = (newParams)=>{\n        const query = new URLSearchParams();\n        Object.entries(newParams).forEach((param)=>{\n            let [key, value] = param;\n            if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n                query.set(key, value.toString());\n            }\n        });\n        router.push(\"?\".concat(query.toString()));\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"20px\",\n            padding: \"20px\"\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                style: {\n                    alignSelf: \"center\",\n                    marginTop: \"20px\"\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_SimulationControlsPopover__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                    addSimulation: addSimulation,\n                    updateUrlParams: updateUrlParams\n                }, void 0, false, {\n                    fileName: \"/Users/lukabagashvili/Desktop/FluFlighters/src/app/simulation/page.tsx\",\n                    lineNumber: 891,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/lukabagashvili/Desktop/FluFlighters/src/app/simulation/page.tsx\",\n                lineNumber: 890,\n                columnNumber: 7\n            }, this),\n            simulations.map((simulation, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    style: {\n                        display: \"flex\",\n                        gap: \"20px\",\n                        marginBottom: \"40px\"\n                    },\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                flex: 1,\n                                display: \"flex\",\n                                flexDirection: \"column\",\n                                gap: \"20px\"\n                            },\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_SimulationControls__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                    ...simulation.params,\n                                    speed: 1,\n                                    handleSpeedChange: ()=>{}\n                                }, void 0, false, {\n                                    fileName: \"/Users/lukabagashvili/Desktop/FluFlighters/src/app/simulation/page.tsx\",\n                                    lineNumber: 909,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_PopulationCanvas__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                                    people: simulation.people,\n                                    vaccineEfficacy: simulation.params.vaccineEfficacy,\n                                    infectionProbability: simulation.params.infectionProbability,\n                                    vaccinatedRecoveryRate: simulation.params.vaccinatedRecoveryRate,\n                                    unvaccinatedRecoveryRate: simulation.params.unvaccinatedRecoveryRate,\n                                    totalDays: simulation.params.totalDays,\n                                    updateChartData: (healthy, infected, recovered, frame)=>{\n                                        updateChartData(index, healthy, infected, recovered, frame);\n                                    }\n                                }, void 0, false, {\n                                    fileName: \"/Users/lukabagashvili/Desktop/FluFlighters/src/app/simulation/page.tsx\",\n                                    lineNumber: 910,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/lukabagashvili/Desktop/FluFlighters/src/app/simulation/page.tsx\",\n                            lineNumber: 901,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                flex: 1\n                            },\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_StatusChart__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                                chartData: simulation.chartData\n                            }, void 0, false, {\n                                fileName: \"/Users/lukabagashvili/Desktop/FluFlighters/src/app/simulation/page.tsx\",\n                                lineNumber: 925,\n                                columnNumber: 13\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/lukabagashvili/Desktop/FluFlighters/src/app/simulation/page.tsx\",\n                            lineNumber: 924,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, index, true, {\n                    fileName: \"/Users/lukabagashvili/Desktop/FluFlighters/src/app/simulation/page.tsx\",\n                    lineNumber: 899,\n                    columnNumber: 9\n                }, this))\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/lukabagashvili/Desktop/FluFlighters/src/app/simulation/page.tsx\",\n        lineNumber: 888,\n        columnNumber: 5\n    }, this);\n}\n_s(Simulation, \"BRD7In95MFX431n32RIT4Eap08s=\", false, function() {\n    return [\n        next_navigation__WEBPACK_IMPORTED_MODULE_1__.useSearchParams,\n        next_navigation__WEBPACK_IMPORTED_MODULE_1__.useRouter\n    ];\n});\n_c = Simulation;\nvar _c;\n$RefreshReg$(_c, \"Simulation\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/simulation/page.tsx\n"));

/***/ })

});